import discord
import random
import asyncio
import youtube_dl
import os
import requests

from generador import gen_pass
from caraosello import flip_coin
from emoji import gen_emodji
from peliculasrandom import movie_random
from videojuegosrandom import videogames_random

from discord.ext import commands

# Configuraci√≥n de youtube_dl
youtube_dl.utils.bug_reports_message = lambda: ''

ytdl_format_options = {
    'format': 'bestaudio/best',
    'outtmpl': '%(extractor)s-%(id)s-%(title)s.%(ext)s',
    'restrictfilenames': True,
    'noplaylist': True,
    'nocheckcertificate': True,
    'ignoreerrors': False,
    'logtostderr': False,
    'quiet': True,
    'no_warnings': True,
    'default_search': 'auto',
    'source_address': '0.0.0.0',
}

ffmpeg_options = {
    'options': '-vn',
}

ytdl = youtube_dl.YoutubeDL(ytdl_format_options)

# Variables necesarias
intents = discord.Intents.default()
intents.members = True
intents.message_content = True

bot = commands.Bot(command_prefix=commands.when_mentioned_or("!"), intents=intents)


# FUNCIONES DE M√öSICA
async def ytdl_from_url(url, loop=None, stream=False):
    loop = loop or asyncio.get_event_loop()
    data = await loop.run_in_executor(None, lambda: ytdl.extract_info(url, download=not stream))
    if 'entries' in data:
        data = data['entries'][0]

    filename = data['url'] if stream else ytdl.prepare_filename(data)
    audio = discord.FFmpegPCMAudio(filename, **ffmpeg_options)
    audio = discord.PCMVolumeTransformer(audio, volume=0.5)
    audio.title = data.get('title')
    return audio


@bot.command()
async def join(ctx, *, channel: discord.VoiceChannel):
    if ctx.voice_client is not None:
        return await ctx.voice_client.move_to(channel)
    await channel.connect()


@bot.command()
async def play(ctx, *, query):
    source = discord.PCMVolumeTransformer(discord.FFmpegPCMAudio(query))
    ctx.voice_client.play(source, after=lambda e: print(f'Player error: {e}') if e else None)
    await ctx.send(f'Now playing: {query}')


@bot.command()
async def yt(ctx, *, url):
    async with ctx.typing():
        player = await ytdl_from_url(url, loop=bot.loop)
        ctx.voice_client.play(player, after=lambda e: print(f'Player error: {e}') if e else None)
        await ctx.send(f'Now playing: {player.title}')


@bot.command()
async def stream(ctx, *, url):
    async with ctx.typing():
        player = await ytdl_from_url(url, loop=bot.loop, stream=True)
        ctx.voice_client.play(player, after=lambda e: print(f'Player error: {e}') if e else None)
        await ctx.send(f'Now playing: {player.title}')


@bot.command()
async def volume(ctx, volume: int):
    if ctx.voice_client is None:
        return await ctx.send("Not connected to a voice channel.")
    ctx.voice_client.source.volume = volume / 100
    await ctx.send(f"Changed volume to {volume}%")


@bot.command()
async def stop(ctx):
    await ctx.voice_client.disconnect()

def get_duck_image_url():    
    url = 'https://random-d.uk/api/random'
    res = requests.get(url)
    data = res.json()
    return data['url']

def get_dog_image_url():    
    url = 'https://random.dog/woof.json'
    res = requests.get(url)
    data = res.json()
    return data['url']


@bot.command('duck')
async def duck(ctx):
    '''Una vez que llamamos al comando duck, 
    el programa llama a la funci√≥n get_duck_image_url'''
    image_url = get_duck_image_url()
    await ctx.send(image_url)

@bot.command('dog')
async def duck(ctx):
    image_url = get_dog_image_url()
    await ctx.send(image_url)

def mem():
    folder = 'images'
    archivos = [f for f in os.listdir(folder) if f.endswith(('.jpg', '.jpeg', '.png', '.gif'))]
    if not archivos:
        return None
    imagen_aleatoria = random.choice(archivos)
    ruta = os.path.join(folder, imagen_aleatoria)
    return discord.File(ruta)



# Hook para asegurarse que el bot est√© en el canal de voz
async def ensure_voice(ctx):
    if ctx.voice_client is None:
        if ctx.author.voice:
            await ctx.author.voice.channel.connect()
        else:
            await ctx.send("You are not connected to a voice channel.")
            raise commands.CommandError("Author not connected to a voice channel.")
    elif ctx.voice_client.is_playing():
        ctx.voice_client.stop()


play.before_invoke(ensure_voice)
yt.before_invoke(ensure_voice)
stream.before_invoke(ensure_voice)


# EVENTOS Y MENSAJES
@bot.event
async def on_ready():
    print(f'Bot General iniciado como {bot.user}')


@bot.event
async def on_member_join(member):
    guild = member.guild
    if guild.system_channel is not None:
        to_send = f'Welcome {member.mention} to {guild.name}!'
        await guild.system_channel.send(to_send)


@bot.event
async def on_message(message):
    if message.author == bot.user:
        return

    content = message.content.lower()

    if content.startswith('/cara_o_sello'):
        resultado = flip_coin()
        await message.channel.send(f"El resultado es: {resultado}")
    elif content.startswith('/passwords'):
        await message.channel.send(gen_pass(10))
    elif content.startswith('/random_movies'):
        resultado = movie_random()
        await message.channel.send(resultado)
    elif content.startswith('/random_videogames'):
        resultado = videogames_random()
        await message.channel.send(resultado)
    elif content.startswith('/random_emojis'):
        resultado = gen_emodji()
        await message.channel.send(resultado)
    elif content.startswith('$hello'):
        await message.channel.send("Hi!")
    elif content.startswith('$bye'):
        await message.channel.send("\U0001f642")
    elif content.startswith("ign tiene tiene razon"):
        await message.channel.send("no le creas, la veas, ignorala")
    elif content.startswith('vale la pena la playstation 5 pro?'):
        await message.channel.send("no, si la tienes quemala")
    elif content.startswith('/help'):
        await message.channel.send("/random_movies, /random_emojis, /random_videogames, /passwords, /cara o sello")
    elif message.content.startswith('/meme'):
        archivo = mem()
        if archivo:
            await message.channel.send(file=archivo)
        else:
            await message.channel.send("No hay memes en la carpeta üò¢")
    else:
        await message.channel.send(message.content)

    await bot.process_commands(message)

bot.run("token")

